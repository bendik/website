---
layout: layouts/base
css: css/layouts/guides.css
wideLayout: true
---

<%
function renderGuidesNav (items) {
  return `
    <ul>
      ${(items || guidesNav).map(renderGuidesNavItem).join('\n')}
    </ul>
  `
}

function renderGuidesNavItem ([url, label, children]) {
  var realUrl = `/${url}`
  let cls = realUrl === page.url ? 'current' : ''
  let childHtml = ''
  if (children && (realUrl === page.url || page.url.startsWith(realUrl))) {
    childHtml = renderGuidesNav(children)
    if (!cls) cls = 'child-current'
  }
  return `
    <li>
      <a class="${cls}" href="${rootPath}${url}" title="${label}">${label}</a>
      ${childHtml}
    </li>
  `
}

function renderBreadcrumbs () {
  let path = [[`${rootPath}guides`, 'Guides']].concat(findBreadcrumbPath())
  return path.map(([url, title]) => `
    <a href="${rootPath}${url}" title="${title}">${title}</a>
  `).join('<span>&rsaquo;</span>')
}

function findBreadcrumbPath (items) {
  items = items || guidesNav
  for (let item of items) {
    let [url, title, children] = item
    let realUrl = `/${url}`
    if (realUrl === page.url) {
      return [item]
    }
    if (children && page.url.startsWith(realUrl)) {
      return [item].concat(findBreadcrumbPath(children))
    }
  }
  return []
}
%>

<main>
  <div class="guides-breadcrumbs">
    <%- renderBreadcrumbs() %>
  </div>
  <div class="guides-layout">
    <nav>
      <%- renderGuidesNav() %>
    </nav>
    <div class="guide-content">
      <%- content %>
    </div>
  </div>
</main>